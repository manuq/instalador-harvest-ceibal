#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import re
import sys
import pwd
import grp
import glob
import errno
import shutil
import logging
import subprocess
import ConfigParser

is_dextrose = None
dextrose_version = None
try:
    import ceibal.laptops
except ImportError:
    is_dextrose = False
else:
    is_dextrose = True

LOGGING_FILENAME = "/home/olpc/.harvest-ceibal.log"
logging.basicConfig(filename=LOGGING_FILENAME, level=logging.INFO,
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    datefmt='%s')

SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))

RPM_NAMES = ['gnome-python2-libwnck', 'libwnck']
BACKUP_DIR = "/home/olpc/.harvest-ceibal/backup/"

OLPC_UTILS_COMMON = [
    "/etc/xdg/autostart/olpc-gnome-stats.desktop",
    "/usr/bin/olpc-gnomestats",
]

OLPC_UTILS_FILES = [
    "/usr/bin/olpc-session",
    "/usr/lib/systemd/system/olpc-log-shutdown.service",
    "/usr/sbin/olpc-log-shutdown",
]

OLPC_UTILS_FILES_DX3 = [
    "/usr/bin/olpc-session",
    "/etc/init/olpc-log-shutdown.conf",
    "/usr/sbin/olpc-log-shutdown",
]

SUGAR_FILES = [
    "/usr/lib/python2.7/site-packages/sugar/activity/activity.py",
]
SUGAR3_FILES = [
    "/usr/lib/python2.7/site-packages/sugar3/activity/activity.py",
]

OLPC_UID = pwd.getpwnam("olpc").pw_uid
OLPC_GID = grp.getgrnam("olpc").gr_gid
ROOT_UID = 0
ROOT_GID = 0

HARVEST_WEBSERVICE_DIR = "/usr/share/sugar/extensions/webservice/harvest/"
HARVEST_CPSECTION_DIR = "/usr/share/sugar/extensions/cpsection/webaccount/services/harvest/"
HARVEST_CONFIG_PATH = os.path.join(SCRIPT_PATH, 'config.cfg')
HARVEST_OPTIONS = [
    ('api_key', 'string'),
    ('timestamp', 'int'),
    ('retry', 'int'),
    ('editable', 'bool'),
    ('hostname', 'string'),
]

system_version = None

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def copy_tree(src_path, src_dir, dest_dir):
    """
    - all inputs are assumed to exist
    - src_path has to have src_dir as prefix
    - src_dir and dest_dir have to be absolute paths

    example: copy_tree("/usr/bin", "/home/olpc/.backup/", "/")
    example: copy_tree("/usr/bin", "/", "/home/olpc/.backup/")

    """
    for root, dirs, files in os.walk(src_path):
        for name in files:
            src = os.path.join(root, name)
            dest = os.path.join(dest_dir, os.path.relpath(src, src_dir))
            mkdir_p(os.path.dirname(dest))
            shutil.copy(src, dest)

def parse_system_version(command_out):
    result = re.search(r"OLPC OS (\S+) for (\S+),", command_out)
    if result:
        return [result.group(1), result.group(2)]

def get_dextrose_version(build):
    if "Version-b" in build or "Dextrose 4" in build:
        return "dextrose4"
    elif "Version-a" in build or "Dextrose 3" in build:
        return "dextrose3"
    else:
        return None

def _read_file(path):
    if os.access(path, os.R_OK) == 0:
        return None

    fd = open(path, 'r')
    value = fd.read()
    fd.close()
    if value:
        value = value.strip('\n')
        return value
    else:
        return None

def get_build():
    xo = ceibal.laptops.XO()
    build_no = xo._build
    if build_no is not None:
            return build_no

    if os.path.isfile('/boot/olpc_build'):
        build_no = _read_file('/boot/olpc_build')
    elif os.path.isfile('/bootpart/olpc_build'):
        build_no = _read_file('/bootpart/olpc_build')

    if build_no is None:
        build_no = _read_file('/etc/redhat-release')

    return build_no

def get_model():
    xo = ceibal.laptops.XO()
    model = None
    if hasattr(xo, '_model'):
        model = xo._model.replace('\x00', '')
    else:
        model = ceibal.laptops.get_model_laptop().replace('\x00', '')

def get_system_version():
    global system_version
    global dextrose_version
    if is_dextrose:
        # please make this always match harvest_dextrose.py
        # in harvest-client
        build = get_build()
        model = get_model()
        dextrose_version = get_dextrose_version(build)
        system_version = [build, model]
    else:
        out = subprocess.check_output(['cat', '/etc/issue'])
        system_version = parse_system_version(out)

    logging.info("La versión del sistema es: {0} {1}".format(system_version[0],
                                                             system_version[1]))

def check_rpms_installed():
    for rpm in RPM_NAMES:
        try:
            subprocess.check_call(['rpm', '-V', rpm])
        except subprocess.CalledProcessError:
            return False
    return True


def install_rpms():
    if is_dextrose:
        logging.info("No se instalan los rpms en dextrose.")
        return

    if check_rpms_installed():
        logging.info("Los rpms ya fueron instalados.")
        return

    logging.info("Instalando rpms...")
    rpms_dir = os.path.join("src", system_version[0], system_version[1], "rpms")
    if not os.path.exists(rpms_dir):
        logging.error("No existen los rpms.")
        return
    try:
        rpms_glob = os.path.join(rpms_dir, '*rpm')
        subprocess.check_call(['rpm', '-Uvh', rpms_glob])
    except subprocess.CalledProcessError:
        logging.error("Falló al instalar los rpms.")


def remove_rpms():
    if is_dextrose:
        logging.info("No se quitan los rpms en dextrose.")
        return

    logging.info("Quitando rpms...")
    try:
        subprocess.check_call(['rpm', '-e'] + RPM_NAMES)
    except subprocess.CalledProcessError:
        logging.error("Falló al quitar los rpms.")


def backup_files():
    if os.path.exists(BACKUP_DIR):
        logging.info("Se omite el backup porque ya existe uno.")
        return
    logging.info("Haciendo backup...")
    mkdir_p(BACKUP_DIR)
    for src in OLPC_UTILS_COMMON + OLPC_UTILS_FILES + OLPC_UTILS_FILES_DX3 + SUGAR3_FILES + SUGAR_FILES:
        if os.path.exists(src):
            dest = os.path.join(BACKUP_DIR, src[1:])
            mkdir_p(os.path.dirname(dest))
            shutil.copy(src, dest)

    if os.path.exists(HARVEST_WEBSERVICE_DIR):
        copy_tree(HARVEST_WEBSERVICE_DIR, "/", BACKUP_DIR)
    if os.path.exists(HARVEST_CPSECTION_DIR):
        copy_tree(HARVEST_CPSECTION_DIR, "/", BACKUP_DIR)

def copy_olpc_utils():
    utils_dir = None
    utils_files = OLPC_UTILS_FILES
    if is_dextrose:
        utils_dir = "olpc-utils-" + dextrose_version
        if dextrose_version == "dextrose3":
            utils_files = OLPC_UTILS_FILES_DX3
    else:
        utils_dir = "olpc-utils"
    for dest in OLPC_UTILS_COMMON + utils_files:
        src = os.path.join(utils_dir, dest[1:])
        mkdir_p(os.path.dirname(dest))
        shutil.copy(src, dest)

def copy_sugar3():
    src = None
    if is_dextrose:
        if dextrose_version is None:
            logging.error("No se conoce la versión de Dextrose.")
            return

        elif dextrose_version == "dextrose3":
            logging.info("No se copia Sugar GKT3 en Dextrose3 porque no hay.")
            return

        src = os.path.join("src", dextrose_version,
                           "sugar-toolkit-gtk3/sugar3/activity/activity.py")
    else:
        src = os.path.join("src", system_version[0],
                           "ALL/sugar-toolkit-gtk3/sugar3/activity/activity.py")
    dest = SUGAR3_FILES[0]
    mkdir_p(os.path.dirname(dest))
    shutil.copy(src, dest)

def copy_sugar():
    src = None
    if is_dextrose:
        if dextrose_version is None:
            logging.error("No se conoce la versión de Dextrose.")
            return

        src = os.path.join("src", dextrose_version,
                           "sugar-toolkit/sugar/activity/activity.py")
    else:
        src = os.path.join("src", system_version[0],
                           "ALL/sugar-toolkit/sugar/activity/activity.py")
    dest = SUGAR_FILES[0]
    mkdir_p(os.path.dirname(dest))
    shutil.copy(src, dest)

def copy_harvest_client():
    dest_dir = "/usr/share/sugar/extensions/"
    src_path = os.path.join("harvest-client", "extensions")
    copy_tree(src_path, src_path, dest_dir)

    src = None
    if is_dextrose:
        src = "harvest-client/etc/harvest-collect-" + dextrose_version + "-ifup"
    else:
        src = "harvest-client/etc/harvest-collect-ifup"
    dest = "/etc/NetworkManager/dispatcher.d/harvest-collect-ifup"
    mkdir_p(os.path.dirname(dest))
    shutil.copy(src, dest)

    os.chmod("/etc/NetworkManager/dispatcher.d/harvest-collect-ifup", 0755)

    if is_dextrose:
        src = "harvest-client/usr/sbin/harvest-collect"
        dest = "/usr/sbin/harvest-collect"
        mkdir_p(os.path.dirname(dest))
        shutil.copy(src, dest)

def copy_files():
    logging.info("Copiando archivos...")
    copy_olpc_utils()
    copy_sugar3()
    copy_sugar()
    copy_harvest_client()

def restore_files():
    if not os.path.exists(BACKUP_DIR):
        logging.info("Se omite la restauración del backup porque no existe uno.")
        return
    logging.info("Restaurando backup...")
    copy_tree(BACKUP_DIR, BACKUP_DIR, "/")

def remove_files():
    logging.info("Eliminando archivos...")
    for path in OLPC_UTILS_FILES:
        os.remove(path)

def enable_services():
    logging.info("Activando servicios...")

    if is_dextrose and dextrose_version == "dextrose3":
        logging.info("No hay servicios que levantar en Dextrose3.")
        return

    try:
        subprocess.check_call(["systemctl", "enable", "olpc-log-shutdown.service"])
    except subprocess.CalledProcessError:
        logging.error("Falló la activación de los servicios.")

def disable_services():
    logging.info("Desactivando servicios...")
    try:
        subprocess.check_call(["systemctl", "disable", "olpc-log-shutdown.service"])
    except subprocess.CalledProcessError:
        logging.error("Falló la desactivación de los servicios.")

def demote(user_uid, user_gid):
    def result():
        os.setgid(user_gid)
        os.setuid(user_uid)
    return result

def configure_harvest():
    env = os.environ.copy()
    env['LOGNAME']  = 'olpc'
    env['USER']  = env['LOGNAME']
    env['HOME']  = '/home/olpc'
    env['PWD']  = env['HOME']

    config = ConfigParser.ConfigParser()
    config.read(HARVEST_CONFIG_PATH)
    for option, opt_type in HARVEST_OPTIONS:
        value = None
        try:
            value = config.get('harvest', option, opt_type)

        except ConfigParser.NoSectionError, e:
            logging.error("Falló la lectura del archivo de configuración.")
            raise e
        except ConfigParser.NoOptionError, e:
            logging.error("Falló el formato del archivo de configuración.")
            raise e

        else:
            gconfkey = "/desktop/sugar/collaboration/harvest_" + option
            args = ['gconftool-2', '--set', gconfkey,
                    '--type', opt_type, str(value)]

            process = subprocess.Popen(
                args,
                preexec_fn=demote(OLPC_UID, OLPC_GID),
                cwd=env['HOME'], env=env)
            result = process.wait()



def install():
    logging.info("Comienza la instalación...")
    get_system_version()

    install_rpms()
    backup_files()
    copy_files()
    configure_harvest()
    enable_services()

    logging.info("FIN")

def remove():
    logging.info("Comienza la desinstalación...")
    get_system_version()

    disable_services()
    remove_files()
    restore_files()
    remove_rpms()

    logging.info("FIN")


def test():
    import doctest
    doctest.testmod()


def usage():
    print("Usage:")
    print("harvest-ceibal [install|postinstall|remove]")


__test__ = dict(allem="""

>>> out = 'OLPC OS 13.4.0 for XO-4, customized (build 5)\\n' + \\
...       'Kernel \\r on an \\m (\l)\\n'

>>> parse_system_version(out)
['13.4.0', 'XO-4']

""")


def as_sudo(admin_function):
    euid = os.geteuid()
    if euid != ROOT_UID:
        print("Necesita ser root. Corriendo sudo...")
        args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *args)
    else:
        admin_function()


if __name__ == '__main__':
    if len(sys.argv) == 2:
        if sys.argv[1] == 'install':
            as_sudo(install)
        elif sys.argv[1] == 'remove':
            as_sudo(remove)
        elif sys.argv[1] == 'test':
            test()
        else:
            usage()
    else:
        usage()
