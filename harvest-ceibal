#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import re
import sys
import pwd
import grp
import glob
import errno
import shutil
import logging
import subprocess

LOGGING_FILENAME = "/home/olpc/.harvest-ceibal.log"
logging.basicConfig(filename=LOGGING_FILENAME, level=logging.INFO,
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    datefmt='%s')

RPM_NAMES = ['gnome-python2-libwnck', 'libwnck']
BACKUP_DIR = "/home/olpc/.harvest-ceibal/backup/"

OLPC_UTILS_FILES = [
    "/etc/xdg/autostart/olpc-gnome-stats.desktop",
    "/usr/bin/olpc-connectivity",
    "/usr/bin/olpc-gnomestats",
    "/usr/bin/olpc-session",
    "/usr/lib/systemd/system/olpc-log-shutdown.service",
    "/usr/sbin/olpc-log-shutdown"]

OLPC_UID = pwd.getpwnam("olpc").pw_uid
OLPC_GID = grp.getgrnam("olpc").gr_gid
ROOT_UID = 0
ROOT_GID = 0

system_version = None

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def parse_system_version(command_out):
    result = re.search(r"OLPC OS (\S+) for (\S+),", command_out)
    if result:
        return [result.group(1), result.group(2)]


def get_system_version():
    global system_version
    out = subprocess.check_output(['cat', '/etc/issue'])
    system_version = parse_system_version(out)
    logging.info("La versión del sistema es: {0} {1}".format(system_version[0],
                                                             system_version[1]))

def check_rpms_installed():
    for rpm in RPM_NAMES:
        try:
            subprocess.check_call(['rpm', '-V', rpm])
        except subprocess.CalledProcessError:
            return False
    return True


def install_rpms():
    if check_rpms_installed():
        logging.info("Los rpms ya fueron instalados.")
        return

    logging.info("Instalando rpms...")
    rpms_dir = os.path.join("src", system_version[0], system_version[1], "rpms")
    if not os.path.exists(rpms_dir):
        logging.error("No existen los rpms.")
        return
    try:
        rpms_glob = os.path.join(rpms_dir, '*rpm')
        subprocess.check_call(['rpm', '-Uvh', rpms_glob])
    except subprocess.CalledProcessError:
        logging.error("Falló al instalar los rpms.")


def remove_rpms():
    logging.info("Quitando rpms...")
    try:
        subprocess.check_call(['rpm', '-e'] + RPM_NAMES)
    except subprocess.CalledProcessError:
        logging.error("Falló al quitar los rpms.")


def backup_files():
    if os.path.exists(BACKUP_DIR):
        logging.info("Se omite el backup porque ya existe uno.")
        return
    logging.info("Haciendo backup...")
    mkdir_p(BACKUP_DIR)
    for src in OLPC_UTILS_FILES:
        if os.path.exists(src):
            dest = os.path.join(BACKUP_DIR, os.path.relpath(src, "/"))
            mkdir_p(os.path.dirname(dest))
            shutil.copy(src, dest)

def copy_files():
    logging.info("Copiando archivos...")


def restore_files():
    if not os.path.exists(BACKUP_DIR):
        logging.info("Se omite la restauración del backup porque no existe uno.")
        return
    logging.info("Restaurando backup...")
    for root, dirs, files in os.walk(BACKUP_DIR):
        for name in files:
            src = os.path.join(root, name)
            dest = os.path.join("/", os.path.relpath(src, BACKUP_DIR))
            mkdir_p(os.path.dirname(dest))
            shutil.copy(src, dest)

def remove_files():
    logging.info("Eliminando archivos...")


def install():
    logging.info("Comienza la instalación...")
    get_system_version()
    install_rpms()
    backup_files()
    copy_files()
    logging.info("FIN")


def remove():
    logging.info("Comienza la desinstalación...")
    get_system_version()
    remove_rpms()
    remove_files()
    restore_files()
    logging.info("FIN")


def test():
    import doctest
    doctest.testmod()


def usage():
    print("Usage:")
    print("harvest-ceibal [install|remove]")


__test__ = dict(allem="""

>>> out = 'OLPC OS 13.4.0 for XO-4, customized (build 5)\\n' + \\
...       'Kernel \\r on an \\m (\l)\\n'

>>> parse_system_version(out)
['13.4.0', 'XO-4']

""")


def as_sudo(admin_function):
    euid = os.geteuid()
    if euid != ROOT_UID:
        print("Necesita ser root. Corriendo sudo...")
        args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *args)
    else:
        admin_function()


if __name__ == '__main__':
    if len(sys.argv) == 2:
        if sys.argv[1] == 'install':
            as_sudo(install)
        elif sys.argv[1] == 'remove':
            as_sudo(remove)
        elif sys.argv[1] == 'test':
            test()
        else:
            usage()
    else:
        usage()
